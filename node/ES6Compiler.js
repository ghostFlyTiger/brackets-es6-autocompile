/*jshint node: true, evil: true */
'use strict';

var path = require('path');
var fs = require('fs');
var mkpath = require('mkpath');
var babel = require("babel");

function readOptions(content) {
  var firstLine = content.substr(0, content.indexOf('\n'));
  var match = /^\s*\/\/\s*(.+)/.exec(firstLine);
  var options = {};

  if (!match) {
    return options;
  }

  match[1].split(',').forEach(function (item) {
    var key, value, i = item.indexOf(':');
    if (i < 0) {
      return;
    }
    key = item.substr(0, i).trim();
    value = item.substr(i + 1).trim();
    if (value.match(/^(true|false|undefined|null|[0-9]+)$/)) {
      value = eval(value);
    }
    options[key] = value;
  });
  return options;
}

// makes a file in a path where directories may or may not have existed before
function mkfile(filepath, content, callback) {
  mkpath(path.dirname(filepath), function (err) {
    if (err) {
      return callback ? callback(err) : undefined;
    }
    fs.writeFile(filepath, content, callback);
  });
}

// compile the given es6 file
function compile(srcFile, dstFile, callback) {

  fs.readFile(srcFile, function (err, buffer) {
    if (err) {
      return callback(err);
    }

    var content = buffer.toString();
    var options = readOptions(content);
    var srcPath = path.dirname(srcFile);
    var jsFile;

    // main is set: compile the referenced file instead
    if (options.main) {
      srcFile = path.resolve(srcPath, options.main);
      return compile(srcFile, callback);
    }

    // out is null or false: do not compile
    if (options.out === null || options.out === false) {
      return callback();
    }

    // out is set: output to the given file name
    if (options.out) {
      dstFile = options.out;
      if (path.extname(dstFile) === '') {
        dstFile += '.js';
      }
      delete options.out;
    }
    jsFile = path.resolve(srcPath, dstFile);
    

    // set the path
    options.paths = [srcPath];
    options.filename = srcFile;
    // options.rootpath = srcPath;

    // plugins
    options.plugins = [];

    // compile !
    var output;
    try {
      output = babel.transform(content, {filename: "TEST"});
    } catch (err) {
      err.filepath = srcFile;
      return callback(err);
    }
    
    var js = output.code;

    // add version tag
    if (!options.compress && !options.cleancss) {
      js = '/* Generated by Babel */\n' + js;
    }
    
    // write output
    mkfile(jsFile, js, function (err) {
      if (err) {
        return callback(err);
      }

      // write source map
      if (output.map && options.sourceMapFilename) {
        mkfile(options.sourceMapFilename, output.map, function (err) {
          if (err) {
            return callback(err);
          }
          callback(null, { filepath: jsFile, output: js });
        });
      } else {
        callback(null, { filepath: jsFile, output: js });
      }
    });

  });

}

// set up service for brackets
function init(DomainManager) {
  if (!DomainManager.hasDomain('ES6Compiler')) {
    DomainManager.registerDomain('ES6Compiler', { major: 1, minor: 0 });
  }
  DomainManager.registerCommand(
    'ES6Compiler', // domain name
    'compile', // command name
    compile, // command handler function
    true, // this command is asynchronous
    'Compiles a .es6 file to a .js file', ['srcFile', 'dstFile'], // path parameters
    null);
}

exports.init = init;
